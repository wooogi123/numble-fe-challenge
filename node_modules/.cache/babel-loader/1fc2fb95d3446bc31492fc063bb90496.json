{"ast":null,"code":"export const getItemCount = base => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\nexport const getColor = () => Math.floor(Math.random() * 255);\nexport const getRandomNumber = len => Math.floor(Math.random() * (len - 1));\n\nclass RGBColor {\n  constructor(r, g, b) {\n    this.r = void 0;\n    this.g = void 0;\n    this.b = void 0;\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  copy() {\n    return new RGBColor(this.r, this.g, this.b);\n  }\n\n  setTolerance(gap) {\n    if (Math.random() >= 0.5) {\n      this.r = Math.min(this.r + gap, 255);\n      this.g = Math.min(this.g + gap, 255);\n      this.b = Math.min(this.b + gap, 255);\n    } else {\n      this.r = Math.max(this.r - gap, 0);\n      this.g = Math.max(this.g - gap, 0);\n      this.b = Math.max(this.b - gap, 0);\n    }\n  }\n\n  toString() {\n    return `rgb(${this.r}, ${this.g}, ${this.b})`;\n  }\n\n}\n\nexport const createColor = () => {\n  const color = new RGBColor(getColor(), getColor(), getColor());\n  return color;\n};\nexport const createGameColors = gap => {\n  const base = createColor();\n  const answer = base.copy();\n  answer.setTolerance(gap);\n  return {\n    base,\n    answer\n  };\n};","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/utils.ts"],"names":["getItemCount","base","Math","pow","round","getColor","floor","random","getRandomNumber","len","RGBColor","constructor","r","g","b","copy","setTolerance","gap","min","max","toString","createColor","color","createGameColors","answer"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,IAAD,IAC1BC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,CAACH,IAAI,GAAG,GAAR,IAAe,CAA1B,IAA+B,CAAxC,EAA2C,CAA3C,CADK;AAGP,OAAO,MAAMI,QAAQ,GAAG,MAAMH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,KAAgB,GAA3B,CAAvB;AAEP,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAC7BP,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,MAAL,MAAiBE,GAAG,GAAG,CAAvB,CAAX,CADK;;AAGP,MAAMC,QAAN,CAAe;AAKbC,EAAAA,WAAW,CAACC,CAAD,EAAYC,CAAZ,EAAuBC,CAAvB,EAAkC;AAAA,SAJ7CF,CAI6C;AAAA,SAH7CC,CAG6C;AAAA,SAF7CC,CAE6C;AAC3C,SAAKF,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,WAAO,IAAIL,QAAJ,CAAa,KAAKE,CAAlB,EAAqB,KAAKC,CAA1B,EAA6B,KAAKC,CAAlC,CAAP;AACD;;AAEDE,EAAAA,YAAY,CAACC,GAAD,EAAc;AACxB,QAAIf,IAAI,CAACK,MAAL,MAAiB,GAArB,EAA0B;AACxB,WAAKK,CAAL,GAASV,IAAI,CAACgB,GAAL,CAAS,KAAKN,CAAL,GAASK,GAAlB,EAAuB,GAAvB,CAAT;AACA,WAAKJ,CAAL,GAASX,IAAI,CAACgB,GAAL,CAAS,KAAKL,CAAL,GAASI,GAAlB,EAAuB,GAAvB,CAAT;AACA,WAAKH,CAAL,GAASZ,IAAI,CAACgB,GAAL,CAAS,KAAKJ,CAAL,GAASG,GAAlB,EAAuB,GAAvB,CAAT;AACD,KAJD,MAIO;AACL,WAAKL,CAAL,GAASV,IAAI,CAACiB,GAAL,CAAS,KAAKP,CAAL,GAASK,GAAlB,EAAuB,CAAvB,CAAT;AACA,WAAKJ,CAAL,GAASX,IAAI,CAACiB,GAAL,CAAS,KAAKN,CAAL,GAASI,GAAlB,EAAuB,CAAvB,CAAT;AACA,WAAKH,CAAL,GAASZ,IAAI,CAACiB,GAAL,CAAS,KAAKL,CAAL,GAASG,GAAlB,EAAuB,CAAvB,CAAT;AACD;AACF;;AAEDG,EAAAA,QAAQ,GAAW;AACjB,WAAQ,OAAM,KAAKR,CAAE,KAAI,KAAKC,CAAE,KAAI,KAAKC,CAAE,GAA3C;AACD;;AA7BY;;AAgCf,OAAO,MAAMO,WAAW,GAAG,MAAgB;AACzC,QAAMC,KAAK,GAAG,IAAIZ,QAAJ,CACZL,QAAQ,EADI,EAEZA,QAAQ,EAFI,EAGZA,QAAQ,EAHI,CAAd;AAMA,SAAOiB,KAAP;AACD,CARM;AAUP,OAAO,MAAMC,gBAAgB,GAAIN,GAAD,IAG3B;AACH,QAAMhB,IAAI,GAAGoB,WAAW,EAAxB;AACA,QAAMG,MAAM,GAAGvB,IAAI,CAACc,IAAL,EAAf;AACAS,EAAAA,MAAM,CAACR,YAAP,CAAoBC,GAApB;AAEA,SAAO;AAAEhB,IAAAA,IAAF;AAAQuB,IAAAA;AAAR,GAAP;AACD,CATM","sourcesContent":["export const getItemCount = (base: number) =>\n  Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nexport const getColor = () => Math.floor(Math.random() * 255);\n\nexport const getRandomNumber = (len: number) =>\n  Math.floor(Math.random() * (len - 1));\n\nclass RGBColor {\n  r: number;\n  g: number;\n  b: number;\n\n  constructor(r: number, g: number, b: number) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  copy() {\n    return new RGBColor(this.r, this.g, this.b);\n  }\n\n  setTolerance(gap: number) {\n    if (Math.random() >= 0.5) {\n      this.r = Math.min(this.r + gap, 255);\n      this.g = Math.min(this.g + gap, 255);\n      this.b = Math.min(this.b + gap, 255);\n    } else {\n      this.r = Math.max(this.r - gap, 0);\n      this.g = Math.max(this.g - gap, 0);\n      this.b = Math.max(this.b - gap, 0);\n    }\n  }\n\n  toString(): string {\n    return `rgb(${this.r}, ${this.g}, ${this.b})`;\n  }\n}\n\nexport const createColor = (): RGBColor => {\n  const color = new RGBColor(\n    getColor(),\n    getColor(),\n    getColor(),\n  );\n\n  return color;\n};\n\nexport const createGameColors = (gap: number): {\n  base: RGBColor;\n  answer: RGBColor;\n} => {\n  const base = createColor();\n  const answer = base.copy();\n  answer.setTolerance(gap);\n\n  return { base, answer };\n};\n"]},"metadata":{},"sourceType":"module"}