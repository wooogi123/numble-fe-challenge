{"ast":null,"code":"export const getItemCount = base => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\nexport const getRandomNumber = len => Math.floor(Math.random() * (len - 1));\nexport const getColor = () => Math.floor(Math.random() * 255);\nconst MAX_HEX = 235;\nconst MIN_HEX = 51;\n\nclass RGBColor {\n  constructor(r, g, b) {\n    this.r = void 0;\n    this.g = void 0;\n    this.b = void 0;\n    this.r = r !== null && r !== void 0 ? r : this.getHex();\n    this.g = g !== null && g !== void 0 ? g : this.getHex();\n    this.b = b !== null && b !== void 0 ? b : this.getHex();\n  }\n\n  getHex() {\n    return Math.floor(Math.random() * (MAX_HEX - MIN_HEX + 1) + MIN_HEX);\n  }\n\n  copy() {\n    return new RGBColor(this.r, this.g, this.b);\n  }\n\n  setTolerance(gap) {\n    if (Math.random() >= 0.5) {\n      this.r = Math.min(this.r + gap, MAX_HEX);\n      this.g = Math.min(this.g + gap, MAX_HEX);\n      this.b = Math.min(this.b + gap, MAX_HEX);\n    } else {\n      this.r = Math.max(this.r - gap, MIN_HEX);\n      this.g = Math.max(this.g - gap, MIN_HEX);\n      this.b = Math.max(this.b - gap, MIN_HEX);\n    }\n  }\n\n  toString() {\n    return `rgb(${this.r}, ${this.g}, ${this.b})`;\n  }\n\n}\n\nexport const createColor = () => new RGBColor();\nexport const createGameColors = gap => {\n  const base = createColor();\n  const answer = base.copy();\n  answer.setTolerance(gap);\n  return {\n    base,\n    answer\n  };\n};\nexport const produce = (state, newState) => ({ ...state,\n  ...newState\n});","map":{"version":3,"sources":["/mnt/c/Users/Akalee/Desktop/work/playground/numble-fe-challenge/src/features/game/utils.ts"],"names":["getItemCount","base","Math","pow","round","getRandomNumber","len","floor","random","getColor","MAX_HEX","MIN_HEX","RGBColor","constructor","r","g","b","getHex","copy","setTolerance","gap","min","max","toString","createColor","createGameColors","answer","produce","state","newState"],"mappings":"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","sourcesContent":["export const getItemCount = (base: number) =>\r\n  Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\r\n\r\nexport const getRandomNumber = (len: number) =>\r\n  Math.floor(Math.random() * (len - 1));\r\n\r\nexport const getColor = () => Math.floor(Math.random() * 255);\r\n\r\nconst MAX_HEX = 235;\r\nconst MIN_HEX = 51;\r\n\r\nclass RGBColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n\r\n  constructor(r?: number, g?: number, b?: number) {\r\n    this.r = r ?? this.getHex();\r\n    this.g = g ?? this.getHex();\r\n    this.b = b ?? this.getHex();\r\n  }\r\n\r\n  getHex() {\r\n    return Math.floor((Math.random() * (MAX_HEX - MIN_HEX + 1)) + MIN_HEX);\r\n  }\r\n\r\n  copy() {\r\n    return new RGBColor(this.r, this.g, this.b);\r\n  }\r\n\r\n  setTolerance(gap: number) {\r\n    if (Math.random() >= 0.5) {\r\n      this.r = Math.min(this.r + gap, MAX_HEX);\r\n      this.g = Math.min(this.g + gap, MAX_HEX);\r\n      this.b = Math.min(this.b + gap, MAX_HEX);\r\n    } else {\r\n      this.r = Math.max(this.r - gap, MIN_HEX);\r\n      this.g = Math.max(this.g - gap, MIN_HEX);\r\n      this.b = Math.max(this.b - gap, MIN_HEX);\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return `rgb(${this.r}, ${this.g}, ${this.b})`;\r\n  }\r\n}\r\n\r\nexport const createColor = () => new RGBColor();\r\n\r\nexport const createGameColors = (gap: number): {\r\n  base: RGBColor;\r\n  answer: RGBColor;\r\n} => {\r\n  const base = createColor();\r\n  const answer = base.copy();\r\n  answer.setTolerance(gap);\r\n\r\n  return { base, answer };\r\n};\r\n\r\nexport const produce = <S>(state: S, newState: Partial<S>): S =>\r\n  ({ ...state, ...newState });\r\n"]},"metadata":{},"sourceType":"module"}