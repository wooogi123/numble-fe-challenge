{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react'; // import { styled } from '../../stitches.config';\n\nimport { GameBoard, GameHeader, GamePlate, GameStart } from '../../components';\nimport useGame from './useGame';\nimport useRequestAnimationFrame from './useRequestAnimationFrame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [state, dispatch] = useGame();\n  const isStarted = React.useMemo(() => state.isStarted, [state]);\n  const isGameOver = React.useMemo(() => state.isGameOver, [state]);\n  const stage = React.useMemo(() => state.stage, [state]);\n  const handleClickStart = React.useCallback(() => {\n    dispatch({\n      type: 'init'\n    });\n  }, [dispatch]);\n  const elapsedTime = React.useRef(0);\n  const runTick = React.useCallback(() => {\n    dispatch({\n      type: 'tick'\n    });\n  }, [dispatch]);\n  const [remainingTime, setRemainingTime] = React.useState(15000);\n\n  const tick = () => {\n    setRemainingTime(prev => prev - 100);\n  };\n\n  React.useEffect(() => {\n    if (remainingTime >= 0) return;\n    dispatch({\n      type: 'gameover'\n    });\n  }, [remainingTime]);\n  useRequestAnimationFrame(deltaTime => {\n    if (!isStarted) return;\n    if (isGameOver) return;\n    elapsedTime.current += deltaTime;\n\n    if (elapsedTime.current >= 100) {\n      elapsedTime.current = 0;\n      tick();\n    }\n  }, [isStarted, isGameOver]);\n\n  if (!isStarted) {\n    return /*#__PURE__*/_jsxDEV(GamePlate, {\n      children: /*#__PURE__*/_jsxDEV(GameStart, {\n        onClick: handleClickStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(GamePlate, {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      isGameOver: isGameOver,\n      stage: stage,\n      time: state.remainingTime,\n      score: state.score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n      stage: stage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"FNr3x8TCGZgDQ880OS5zA/srC6Q=\", false, function () {\n  return [useGame, useRequestAnimationFrame];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx"],"names":["React","GameBoard","GameHeader","GamePlate","GameStart","useGame","useRequestAnimationFrame","Game","state","dispatch","isStarted","useMemo","isGameOver","stage","handleClickStart","useCallback","type","elapsedTime","useRef","runTick","remainingTime","setRemainingTime","useState","tick","prev","useEffect","deltaTime","current","score"],"mappings":"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","sourcesContent":["import * as React from 'react';\n// import { styled } from '../../stitches.config';\nimport {\n  GameBoard,\n  GameHeader,\n  GamePlate,\n  GameStart,\n} from '../../components';\nimport useGame from './useGame';\nimport useRequestAnimationFrame from './useRequestAnimationFrame';\n\nconst Game: React.FC = () => {\n  const [state, dispatch] = useGame();\n\n  const isStarted = React.useMemo(() => state.isStarted, [state]);\n  const isGameOver = React.useMemo(() => state.isGameOver, [state]);\n  const stage = React.useMemo(() => state.stage, [state]);\n\n  const handleClickStart = React.useCallback(() => {\n    dispatch({ type: 'init' });\n  }, [dispatch]);\n\n  const elapsedTime = React.useRef<number>(0);\n\n  const runTick = React.useCallback(() => {\n    dispatch({ type: 'tick' });\n  }, [dispatch]);\n\n  const [remainingTime, setRemainingTime] = React.useState<number>(15000);\n\n  const tick = () => {\n    setRemainingTime((prev) => prev - 100);\n  };\n\n  React.useEffect(() => {\n    if (remainingTime >= 0) return;\n    dispatch({ type: 'gameover' });\n  }, [remainingTime]);\n\n  useRequestAnimationFrame((deltaTime) => {\n    if (!isStarted) return;\n    if (isGameOver) return;\n\n    elapsedTime.current += deltaTime;\n\n    if (elapsedTime.current >= 100) {\n      elapsedTime.current = 0;\n      tick();\n    }\n  }, [isStarted, isGameOver]);\n\n  if (!isStarted) {\n    return (\n      <GamePlate>\n        <GameStart onClick={handleClickStart} />\n      </GamePlate>\n    );\n  }\n\n  return (\n    <GamePlate>\n      <GameHeader\n        isGameOver={isGameOver}\n        stage={stage}\n        time={state.remainingTime}\n        score={state.score}\n      />\n      <GameBoard stage={stage} />\n    </GamePlate>\n  );\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}