{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from 'react';\nconst initialState = {\n  stage: 0,\n  score: 0,\n  isStarted: false,\n  isGameOver: false\n};\n\nconst useGame = () => {\n  _s();\n\n  const [state, dispatch] = React.useReducer(gameReducer, initialState);\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(state);\n    }\n  }, [state]);\n  return [state, dispatch];\n};\n\n_s(useGame, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\nexport default useGame;\nexport const gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'init':\n      {\n        return {\n          stage: 1,\n          score: 0,\n          isStarted: true,\n          isGameOver: false\n        };\n      }\n\n    case 'done':\n      {\n        return initialState;\n      }\n\n    case 'gameover':\n      {\n        return produce(state, {\n          isGameOver: true\n        });\n      }\n\n    case 'tick':\n      {\n        if (state.isStarted) {\n          return produce(state, {\n            remainingTime: state.remainingTime - 100\n          });\n        }\n\n        return state;\n      }\n\n    default:\n      {\n        throw new Error('invalid action');\n      }\n  }\n\n  ;\n};\n\nconst produce = (state, newState) => ({ ...state,\n  ...newState\n});","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/useGame.ts"],"names":["React","initialState","stage","score","isStarted","isGameOver","useGame","state","dispatch","useReducer","gameReducer","useEffect","process","env","NODE_ENV","console","log","action","type","produce","remainingTime","Error","newState"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,YAAmB,GAAG;AAC1BC,EAAAA,KAAK,EAAE,CADmB;AAE1BC,EAAAA,KAAK,EAAE,CAFmB;AAG1BC,EAAAA,SAAS,EAAE,KAHe;AAI1BC,EAAAA,UAAU,EAAE;AAJc,CAA5B;;AAYA,MAAMC,OAAO,GAAG,MAAqB;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,UAAN,CAAiBC,WAAjB,EAA8BT,YAA9B,CAA1B;AAEAD,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CC,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACD;AACF,GAJD,EAIG,CAACA,KAAD,CAJH;AAMA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACD,CAVD;;GAAMF,O;;AAYN,eAAeA,OAAf;AAEA,OAAO,MAAMI,WAAyC,GAAG,CAACH,KAAD,EAAQU,MAAR,KAAmB;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AAAa;AACX,eAAO;AACLhB,UAAAA,KAAK,EAAE,CADF;AAELC,UAAAA,KAAK,EAAE,CAFF;AAGLC,UAAAA,SAAS,EAAE,IAHN;AAILC,UAAAA,UAAU,EAAE;AAJP,SAAP;AAMD;;AACD,SAAK,MAAL;AAAa;AACX,eAAOJ,YAAP;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,eAAOkB,OAAO,CAACZ,KAAD,EAAQ;AAAEF,UAAAA,UAAU,EAAE;AAAd,SAAR,CAAd;AACD;;AACD,SAAK,MAAL;AAAa;AACX,YAAIE,KAAK,CAACH,SAAV,EAAqB;AACnB,iBAAOe,OAAO,CAACZ,KAAD,EAAQ;AAAEa,YAAAA,aAAa,EAAEb,KAAK,CAACa,aAAN,GAAsB;AAAvC,WAAR,CAAd;AACD;;AAED,eAAOb,KAAP;AACD;;AACD;AAAS;AACP,cAAM,IAAIc,KAAJ,CAAU,gBAAV,CAAN;AACD;AAxBH;;AAyBC;AACF,CA3BM;;AA2CP,MAAMF,OAAO,GAAG,CAAIZ,KAAJ,EAAce,QAAd,MACb,EAAE,GAAGf,KAAL;AAAY,KAAGe;AAAf,CADa,CAAhB","sourcesContent":["import * as React from 'react';\n\nconst initialState: State = {\n  stage: 0,\n  score: 0,\n  isStarted: false,\n  isGameOver: false,\n};\n\ntype UseGameReturn = [\n  state: State,\n  dispatch: React.Dispatch<Action>,\n];\n\nconst useGame = (): UseGameReturn => {\n  const [state, dispatch] = React.useReducer(gameReducer, initialState);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(state);\n    }\n  }, [state]);\n\n  return [state, dispatch];\n}\n\nexport default useGame;\n\nexport const gameReducer: React.Reducer<State, Action> = (state, action) => {\n  switch (action.type) {\n    case 'init': {\n      return {\n        stage: 1,\n        score: 0,\n        isStarted: true,\n        isGameOver: false,\n      };\n    }\n    case 'done': {\n      return initialState;\n    }\n    case 'gameover': {\n      return produce(state, { isGameOver: true });\n    }\n    case 'tick': {\n      if (state.isStarted) {\n        return produce(state, { remainingTime: state.remainingTime - 100 });\n      }\n\n      return state;\n    }\n    default: {\n      throw new Error('invalid action');\n    }\n  };\n};\n\ninterface State {\n  stage: number;\n  score: number;\n  isStarted: boolean;\n  isGameOver: boolean;\n}\n\ntype Action =\n  | { type: 'init' }\n  | { type: 'done' }\n  | { type: 'gameover' }\n  | { type: 'tick' }\n;\n\nconst produce = <S>(state: S, newState: Partial<S>): S =>\n  ({ ...state, ...newState });\n"]},"metadata":{},"sourceType":"module"}