{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx\";\nimport * as React from 'react';\nimport { styled } from '../stitches.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCount = base => Math.pow(Math.round(base + 0.5) / 2 + 1, 2);\n\nconst getTolerance = t => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = len => Math.floor(Math.random() * len);\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = stage => {\n  const r = getColor();\n  const g = getColor();\n  const b = getColor();\n  return {\n    base: `rgb(${r}, ${g}, ${b})`,\n    answer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n  };\n};\n\nconst GameBoard = _ref => {\n  let {\n    stage\n  } = _ref;\n  const count = Math.pow(Math.round((stage + 0.5) / 2) + 1, 2);\n\n  const generateColors = () => {\n    const getColor = () => Math.floor(230 * Math.random());\n\n    const r = getColor();\n    const g = getColor();\n    const b = getColor();\n\n    const getDeviation = t => Math.sign(Math.random() - 0.5) * t;\n\n    return {\n      baseColor: `rgb(${r}, ${g}, ${b})`,\n      answerColor: `rgb(${r + getDeviation(stage)}, ${g + getDeviation(stage)}, ${b + getDeviation(stage)})`\n    };\n  };\n\n  const getRandomItem = len => Math.floor(Math.random() * len);\n\n  const getItems = () => {\n    const {\n      baseColor,\n      answerColor\n    } = generateColors();\n    const arr = Array(count).fill(undefined).map((_, idx) => idx);\n    const itemIdx = getRandomItem(arr.length);\n    return arr.map((el, idx) => ({\n      key: el.toString(),\n      background: itemIdx === idx ? answerColor : baseColor\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Board, {\n    style: {\n      '--count': 2\n    },\n    children: getItems().map(_ref2 => {\n      let {\n        key,\n        background\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background\n        }\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 3\n  }, this);\n};\n\n_c = GameBoard;\nexport default GameBoard;\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8\n});\n_c2 = Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GameBoard\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx"],"names":["React","styled","getCount","base","Math","pow","round","getTolerance","t","sign","random","getRandomItem","len","floor","getColor","generateColors","stage","r","g","b","answer","GameBoard","count","getDeviation","baseColor","answerColor","getItems","arr","Array","fill","undefined","map","_","idx","itemIdx","length","el","key","toString","background","Board","width","aspectRatio","display","gridTemplate","gap"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { styled } from '../stitches.config';\n\nconst getCount = (base: number) => Math.pow(Math.round(base + 0.5) / 2 + 1, 2);\n\nconst getTolerance = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = (len: number) => Math.floor(Math.random() * len);\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = (stage: number): {\n\tbase: string;\n\tanswer: string;\n} => {\n\tconst\tr = getColor();\n\tconst g = getColor();\n\tconst b = getColor();\n\n\treturn {\n\t\tbase: `rgb(${r}, ${g}, ${b})`,\n\t\tanswer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n\t}\n};\n\ninterface GameBoardProps {\n\tstage: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n\tstage,\n}) => {\n\tconst count = Math.pow(Math.round((stage + 0.5) / 2) + 1, 2);\n\n\tconst generateColors = (): { baseColor: string; answerColor: string; } => {\n\t\tconst getColor = () => Math.floor(230 * Math.random());\n\n\t\tconst r = getColor();\n\t\tconst g = getColor();\n\t\tconst b = getColor();\n\n\t\tconst getDeviation = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\n\t\treturn {\n\t\t\tbaseColor: `rgb(${r}, ${g}, ${b})`,\n\t\t\tanswerColor: `rgb(${r + getDeviation(stage)}, ${g + getDeviation(stage)}, ${b + getDeviation(stage)})`,\n\t\t};\n\t};\n\n\tconst getRandomItem = (len: number) => Math.floor(Math.random() * len);\n\n\tconst getItems = (): { key: string; background: string }[] => {\n\t\tconst { baseColor, answerColor } = generateColors();\n\n\t\tconst arr = Array(count).fill(undefined).map((_, idx) => (idx));\n\n\t\tconst itemIdx = getRandomItem(arr.length);\n\n\t\treturn arr.map((el, idx) => ({ key: el.toString(), background: itemIdx === idx ? answerColor : baseColor }));\n\t};\n\n\treturn (\n\t\t<Board style={{ '--count': 2 } as React.CSSProperties}>\n\t\t\t{getItems().map(({ key, background }) => (\n\t\t\t\t<div key={key} style={{ background }}></div>\n\t\t\t))}\n\t\t</Board>\n\t);\n};\n\nexport default GameBoard;\n\nconst Board = styled('div', {\n\twidth: '100%',\n\taspectRatio: '1/1',\n\tdisplay: 'grid',\n\tgridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n\tgap: 8,\n});\n"]},"metadata":{},"sourceType":"module"}