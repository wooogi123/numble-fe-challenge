{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Board.tsx\";\nimport * as React from 'react';\nimport { GameBoard } from '../../components';\nimport { getItemCount, getRandomNumber, createGameColors } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateItems = count => {\n  const {\n    base,\n    answer\n  } = createGameColors();\n  const answerIdx = getRandomNumber(count);\n  return Array(count).fill(undefined).map((_, idx) => ({\n    key: `${count}-${idx}`,\n    background: answerIdx === idx ? answer.toString() : base.toString(),\n    isAnswer: answerIdx === idx\n  }));\n};\n\nconst Board = _ref => {\n  let {\n    stage,\n    onClickAnswer\n  } = _ref;\n  const itemCount = getItemCount(stage);\n  const gridItemCount = Math.floor(Math.sqrt(itemCount));\n  return /*#__PURE__*/_jsxDEV(GameBoard, {\n    columnCount: gridItemCount,\n    rowCount: gridItemCount,\n    children: generateItems(itemCount).map(_ref2 => {\n      let {\n        key,\n        background,\n        isAnswer\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background\n        },\n        onClick: isAnswer ? onClickAnswer.bind(null) : undefined\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Board;\nexport default _c2 = /*#__PURE__*/React.memo(Board);\n/*\nimport * as React from 'react';\nimport { styled } from '../stitches.config';\n\nconst getCount = (base: number) => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nconst getTolerance = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = (len: number) => Math.floor(Math.random() * (len - 1));\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = (stage: number): {\n  base: string;\n  answer: string;\n} => {\n  const  r = getColor();\n  const g = getColor();\n  const b = getColor();\n\n  return {\n    base: `rgb(${r}, ${g}, ${b})`,\n    answer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n  }\n};\n\nconst geenrateItems = (stage: number): {\n  key: string;\n  background: string;\n}[] => {\n  const { base, answer } = generateColors(stage);\n\n  const count = getCount(stage);\n\n  const answerIdx = getRandomItem(count);\n\n  console.log(answerIdx, count);\n\n  return Array(count)\n    .fill(undefined)\n    .map((_, idx) => ({\n      key: `${idx}`,\n      background: answerIdx === idx ? answer : base,\n    }));\n};\n\ninterface GameBoardProps {\n  stage: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n  stage,\n}) => {\n  return (\n    <Board style={{ '--count': Math.floor(Math.sqrt(getCount(stage))) } as React.CSSProperties}>\n      {geenrateItems(stage).map(({ key, background }) => (\n        <div\n          style={{ background }}\n          key={key}\n        />\n      ))}\n    </Board>\n  );\n};\n\nexport default React.memo(GameBoard);\n\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8,\n});\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Board.tsx"],"names":["React","GameBoard","getItemCount","getRandomNumber","createGameColors","generateItems","count","base","answer","answerIdx","Array","fill","undefined","map","_","idx","key","background","toString","isAnswer","Board","stage","onClickAnswer","itemCount","gridItemCount","Math","floor","sqrt","bind","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SACEC,YADF,EAEEC,eAFF,EAGEC,gBAHF,QAIO,SAJP;;;AAYA,MAAMC,aAAa,GAAIC,KAAD,IAAoC;AACxD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBJ,gBAAgB,EAAzC;AAEA,QAAMK,SAAS,GAAGN,eAAe,CAACG,KAAD,CAAjC;AAEA,SAAOI,KAAK,CAACJ,KAAD,CAAL,CACJK,IADI,CACCC,SADD,EAEJC,GAFI,CAEA,CAACC,CAAD,EAAIC,GAAJ,MAAa;AAChBC,IAAAA,GAAG,EAAG,GAAEV,KAAM,IAAGS,GAAI,EADL;AAEhBE,IAAAA,UAAU,EAAER,SAAS,KAAKM,GAAd,GACRP,MAAM,CAACU,QAAP,EADQ,GAERX,IAAI,CAACW,QAAL,EAJY;AAKhBC,IAAAA,QAAQ,EAAEV,SAAS,KAAKM;AALR,GAAb,CAFA,CAAP;AASD,CAdD;;AAqBA,MAAMK,KAA2B,GAAG,QAG9B;AAAA,MAH+B;AACnCC,IAAAA,KADmC;AAEnCC,IAAAA;AAFmC,GAG/B;AACJ,QAAMC,SAAS,GAAGrB,YAAY,CAACmB,KAAD,CAA9B;AACA,QAAMG,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUJ,SAAV,CAAX,CAAtB;AAEA,sBACE,QAAC,SAAD;AACE,IAAA,WAAW,EAAEC,aADf;AAEE,IAAA,QAAQ,EAAEA,aAFZ;AAAA,cAIGnB,aAAa,CAACkB,SAAD,CAAb,CAAyBV,GAAzB,CAA6B;AAAA,UAAC;AAC7BG,QAAAA,GAD6B;AAE7BC,QAAAA,UAF6B;AAG7BE,QAAAA;AAH6B,OAAD;AAAA,0BAK5B;AAEE,QAAA,KAAK,EAAE;AAAEF,UAAAA;AAAF,SAFT;AAGE,QAAA,OAAO,EAAEE,QAAQ,GAAGG,aAAa,CAACM,IAAd,CAAmB,IAAnB,CAAH,GAA8BhB;AAHjD,SACOI,GADP;AAAA;AAAA;AAAA;AAAA,cAL4B;AAAA,KAA7B;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzBD;;KAAMI,K;AA2BN,kCAAepB,KAAK,CAAC6B,IAAN,CAAWT,KAAX,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as React from 'react'\nimport { GameBoard } from '../../components';\nimport {\n  getItemCount,\n  getRandomNumber,\n  createGameColors,\n} from './utils';\n\ninterface ClickableItem {\n  key: string;\n  background: string;\n  isAnswer: boolean;\n}\n\nconst generateItems = (count: number): ClickableItem[] => {\n  const { base, answer } = createGameColors();\n\n  const answerIdx = getRandomNumber(count);\n\n  return Array(count)\n    .fill(undefined)\n    .map((_, idx) => ({\n      key: `${count}-${idx}`,\n      background: answerIdx === idx\n        ? answer.toString()\n        : base.toString(),\n      isAnswer: answerIdx === idx,\n    }));\n};\n\ninterface BoardProps {\n  stage: number;\n  onClickAnswer: () => void;\n}\n\nconst Board: React.FC<BoardProps> = ({\n  stage,\n  onClickAnswer,\n}) => {\n  const itemCount = getItemCount(stage);\n  const gridItemCount = Math.floor(Math.sqrt(itemCount));\n\n  return (\n    <GameBoard\n      columnCount={gridItemCount}\n      rowCount={gridItemCount}\n    >\n      {generateItems(itemCount).map(({\n        key,\n        background,\n        isAnswer,\n      }) => (\n        <div\n          key={key}\n          style={{ background }}\n          onClick={isAnswer ? onClickAnswer.bind(null) : undefined}\n        />\n      ))}\n    </GameBoard>\n  );\n};\n\nexport default React.memo(Board);\n\n/*\nimport * as React from 'react';\nimport { styled } from '../stitches.config';\n\nconst getCount = (base: number) => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nconst getTolerance = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = (len: number) => Math.floor(Math.random() * (len - 1));\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = (stage: number): {\n  base: string;\n  answer: string;\n} => {\n  const  r = getColor();\n  const g = getColor();\n  const b = getColor();\n\n  return {\n    base: `rgb(${r}, ${g}, ${b})`,\n    answer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n  }\n};\n\nconst geenrateItems = (stage: number): {\n  key: string;\n  background: string;\n}[] => {\n  const { base, answer } = generateColors(stage);\n\n  const count = getCount(stage);\n\n  const answerIdx = getRandomItem(count);\n\n  console.log(answerIdx, count);\n\n  return Array(count)\n    .fill(undefined)\n    .map((_, idx) => ({\n      key: `${idx}`,\n      background: answerIdx === idx ? answer : base,\n    }));\n};\n\ninterface GameBoardProps {\n  stage: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n  stage,\n}) => {\n  return (\n    <Board style={{ '--count': Math.floor(Math.sqrt(getCount(stage))) } as React.CSSProperties}>\n      {geenrateItems(stage).map(({ key, background }) => (\n        <div\n          style={{ background }}\n          key={key}\n        />\n      ))}\n    </Board>\n  );\n};\n\nexport default React.memo(GameBoard);\n\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8,\n});\n*/\n"]},"metadata":{},"sourceType":"module"}