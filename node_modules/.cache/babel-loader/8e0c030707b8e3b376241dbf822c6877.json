{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Akalee/Desktop/work/playground/numble-fe-challenge/src/features/game/Board.tsx\";\nimport * as React from 'react';\nimport { GameBoard } from '../../components';\nimport { getItemCount, getRandomNumber, createGameColors } from './utils';\nimport { LAST_STAGE } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst generateItems = stage => {\n  const colorGap = (LAST_STAGE - stage + 1) * 4;\n  const {\n    base,\n    answer\n  } = createGameColors(colorGap);\n  const count = getItemCount(stage);\n  const answerIdx = getRandomNumber(count);\n  return Array(count).fill(undefined).map((_, idx) => ({\n    key: `${count}-${idx}`,\n    background: answerIdx === idx ? answer.toString() : base.toString(),\n    isAnswer: answerIdx === idx\n  }));\n};\n\nconst Board = _ref => {\n  let {\n    stage,\n    onClickAnswer,\n    onClickWrongAnswer\n  } = _ref;\n  const itemCount = getItemCount(stage);\n  const gridItemCount = Math.floor(Math.sqrt(itemCount));\n  return /*#__PURE__*/_jsxDEV(GameBoard, {\n    columnCount: gridItemCount,\n    rowCount: gridItemCount,\n    children: generateItems(stage).map(_ref2 => {\n      let {\n        key,\n        background,\n        isAnswer\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background\n        },\n        onClick: isAnswer ? onClickAnswer : onClickWrongAnswer\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Board;\nexport default _c2 = /*#__PURE__*/React.memo(Board);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/mnt/c/Users/Akalee/Desktop/work/playground/numble-fe-challenge/src/features/game/Board.tsx"],"names":["React","GameBoard","getItemCount","getRandomNumber","createGameColors","LAST_STAGE","generateItems","stage","colorGap","base","answer","count","answerIdx","Array","fill","undefined","map","_","idx","key","background","toString","isAnswer","Board","onClickAnswer","onClickWrongAnswer","itemCount","gridItemCount","Math","floor","sqrt","memo"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SACEC,YADF,EAEEC,eAFF,EAGEC,gBAHF,QAIO,SAJP;AAKA,SAASC,UAAT,QAA2B,aAA3B;;;AAQA,MAAMC,aAAa,GAAIC,KAAD,IAAoC;AACxD,QAAMC,QAAQ,GAAG,CAACH,UAAU,GAAGE,KAAb,GAAqB,CAAtB,IAA2B,CAA5C;AACA,QAAM;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBN,gBAAgB,CAACI,QAAD,CAAzC;AAEA,QAAMG,KAAK,GAAGT,YAAY,CAACK,KAAD,CAA1B;AAEA,QAAMK,SAAS,GAAGT,eAAe,CAACQ,KAAD,CAAjC;AAEA,SAAOE,KAAK,CAACF,KAAD,CAAL,CACJG,IADI,CACCC,SADD,EAEJC,GAFI,CAEA,CAACC,CAAD,EAAIC,GAAJ,MAAa;AAChBC,IAAAA,GAAG,EAAG,GAAER,KAAM,IAAGO,GAAI,EADL;AAEhBE,IAAAA,UAAU,EAAER,SAAS,KAAKM,GAAd,GACRR,MAAM,CAACW,QAAP,EADQ,GAERZ,IAAI,CAACY,QAAL,EAJY;AAKhBC,IAAAA,QAAQ,EAAEV,SAAS,KAAKM;AALR,GAAb,CAFA,CAAP;AASD,CAjBD;;AAyBA,MAAMK,KAA2B,GAAG,QAI9B;AAAA,MAJ+B;AACnChB,IAAAA,KADmC;AAEnCiB,IAAAA,aAFmC;AAGnCC,IAAAA;AAHmC,GAI/B;AACJ,QAAMC,SAAS,GAAGxB,YAAY,CAACK,KAAD,CAA9B;AACA,QAAMoB,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,IAAL,CAAUJ,SAAV,CAAX,CAAtB;AAEA,sBACE,QAAC,SAAD;AACE,IAAA,WAAW,EAAEC,aADf;AAEE,IAAA,QAAQ,EAAEA,aAFZ;AAAA,cAIGrB,aAAa,CAACC,KAAD,CAAb,CAAqBS,GAArB,CAAyB;AAAA,UAAC;AACzBG,QAAAA,GADyB;AAEzBC,QAAAA,UAFyB;AAGzBE,QAAAA;AAHyB,OAAD;AAAA,0BAKxB;AAEE,QAAA,KAAK,EAAE;AAAEF,UAAAA;AAAF,SAFT;AAGE,QAAA,OAAO,EAAEE,QAAQ,GACbE,aADa,GAEbC;AALN,SACON,GADP;AAAA;AAAA;AAAA;AAAA,cALwB;AAAA,KAAzB;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA5BD;;KAAMI,K;AA8BN,kCAAevB,KAAK,CAAC+B,IAAN,CAAWR,KAAX,CAAf","sourcesContent":["import * as React from 'react'\r\nimport { GameBoard } from '../../components';\r\nimport {\r\n  getItemCount,\r\n  getRandomNumber,\r\n  createGameColors,\r\n} from './utils';\r\nimport { LAST_STAGE } from './constants';\r\n\r\ninterface ClickableItem {\r\n  key: string;\r\n  background: string;\r\n  isAnswer: boolean;\r\n}\r\n\r\nconst generateItems = (stage: number): ClickableItem[] => {\r\n  const colorGap = (LAST_STAGE - stage + 1) * 4;\r\n  const { base, answer } = createGameColors(colorGap);\r\n\r\n  const count = getItemCount(stage);\r\n\r\n  const answerIdx = getRandomNumber(count);\r\n\r\n  return Array(count)\r\n    .fill(undefined)\r\n    .map((_, idx) => ({\r\n      key: `${count}-${idx}`,\r\n      background: answerIdx === idx\r\n        ? answer.toString()\r\n        : base.toString(),\r\n      isAnswer: answerIdx === idx,\r\n    }));\r\n};\r\n\r\ninterface BoardProps {\r\n  stage: number;\r\n  onClickAnswer: () => void;\r\n  onClickWrongAnswer: () => void;\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = ({\r\n  stage,\r\n  onClickAnswer,\r\n  onClickWrongAnswer,\r\n}) => {\r\n  const itemCount = getItemCount(stage);\r\n  const gridItemCount = Math.floor(Math.sqrt(itemCount));\r\n\r\n  return (\r\n    <GameBoard\r\n      columnCount={gridItemCount}\r\n      rowCount={gridItemCount}\r\n    >\r\n      {generateItems(stage).map(({\r\n        key,\r\n        background,\r\n        isAnswer,\r\n      }) => (\r\n        <div\r\n          key={key}\r\n          style={{ background }}\r\n          onClick={isAnswer\r\n            ? onClickAnswer\r\n            : onClickWrongAnswer}\r\n        />\r\n      ))}\r\n    </GameBoard>\r\n  );\r\n};\r\n\r\nexport default React.memo(Board);\r\n"]},"metadata":{},"sourceType":"module"}