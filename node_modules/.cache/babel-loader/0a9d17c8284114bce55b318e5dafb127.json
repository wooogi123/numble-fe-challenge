{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { GamePlate, GameStart } from '../../components';\nimport Status from './Status';\nimport Board from './Board';\nimport useGame from './useGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [state, dispatch] = useGame();\n  const isStarted = React.useMemo(() => state.isStarted, [state]);\n  const isGameOver = React.useMemo(() => state.isGameOver, [state]);\n  const stage = React.useMemo(() => state.stage, [state]);\n\n  const handleClickStart = () => dispatch({\n    type: 'init'\n  });\n\n  const handleGameEnd = () => dispatch({\n    type: 'gameover'\n  });\n\n  if (!isStarted) {\n    return /*#__PURE__*/_jsxDEV(GamePlate, {\n      children: /*#__PURE__*/_jsxDEV(GameStart, {\n        onClick: handleClickStart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(GamePlate, {\n    children: [/*#__PURE__*/_jsxDEV(Status, {\n      isStarted: isStarted,\n      stage: stage,\n      score: state.score,\n      onGameEnd: handleGameEnd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      stage: stage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"zEZkHtLj4i7iYK/9pDjHScWfaxs=\", false, function () {\n  return [useGame];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx"],"names":["React","GamePlate","GameStart","Status","Board","useGame","Game","state","dispatch","isStarted","useMemo","isGameOver","stage","handleClickStart","type","handleGameEnd","score"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAEEC,SAFF,EAGEC,SAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,IAAc,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,OAAO,EAAjC;AAEA,QAAMI,SAAS,GAAGT,KAAK,CAACU,OAAN,CAAc,MAAMH,KAAK,CAACE,SAA1B,EAAqC,CAACF,KAAD,CAArC,CAAlB;AACA,QAAMI,UAAU,GAAGX,KAAK,CAACU,OAAN,CAAc,MAAMH,KAAK,CAACI,UAA1B,EAAsC,CAACJ,KAAD,CAAtC,CAAnB;AACA,QAAMK,KAAK,GAAGZ,KAAK,CAACU,OAAN,CAAc,MAAMH,KAAK,CAACK,KAA1B,EAAiC,CAACL,KAAD,CAAjC,CAAd;;AAEA,QAAMM,gBAAgB,GAAG,MAAML,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAvC;;AACA,QAAMC,aAAa,GAAG,MAAMP,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAAD,CAApC;;AAEA,MAAI,CAACL,SAAL,EAAgB;AACd,wBACE,QAAC,SAAD;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAEI;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,SAAS,EAAEJ,SADb;AAEE,MAAA,KAAK,EAAEG,KAFT;AAGE,MAAA,KAAK,EAAEL,KAAK,CAACS,KAHf;AAIE,MAAA,SAAS,EAAED;AAJb;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEH;AAAd;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA7BD;;GAAMN,I;UACsBD,O;;;KADtBC,I;AA+BN,eAAeA,IAAf","sourcesContent":["import * as React from 'react';\nimport {\n  GameBoard,\n  GamePlate,\n  GameStart,\n} from '../../components';\nimport Status from './Status';\nimport Board from './Board';\nimport useGame from './useGame';\n\nconst Game: React.FC = () => {\n  const [state, dispatch] = useGame();\n\n  const isStarted = React.useMemo(() => state.isStarted, [state]);\n  const isGameOver = React.useMemo(() => state.isGameOver, [state]);\n  const stage = React.useMemo(() => state.stage, [state]);\n\n  const handleClickStart = () => dispatch({ type: 'init' });\n  const handleGameEnd = () => dispatch({ type: 'gameover' });\n\n  if (!isStarted) {\n    return (\n      <GamePlate>\n        <GameStart onClick={handleClickStart} />\n      </GamePlate>\n    );\n  }\n\n  return (\n    <GamePlate>\n      <Status\n        isStarted={isStarted}\n        stage={stage}\n        score={state.score}\n        onGameEnd={handleGameEnd}\n      />\n      <Board stage={stage} />\n    </GamePlate>\n  );\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}