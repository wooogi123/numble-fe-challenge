{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx\";\nimport * as React from 'react';\nimport { styled } from '../stitches.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCount = base => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nconst getTolerance = t => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = len => Math.floor(Math.random() * len);\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = stage => {\n  const r = getColor();\n  const g = getColor();\n  const b = getColor();\n  return {\n    base: `rgb(${r}, ${g}, ${b})`,\n    answer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n  };\n};\n\nconst geenrateItems = stage => {\n  const {\n    base,\n    answer\n  } = generateColors(stage);\n  const count = getCount(stage);\n  const answerIdx = getRandomItem(count);\n  return Array(count).fill(undefined).map((_, idx) => ({\n    key: `${idx}`,\n    background: answerIdx === idx ? answer : base\n  }));\n};\n\nconst GameBoard = _ref => {\n  let {\n    stage\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Board, {\n    style: {\n      '--count': getCount(stage)\n    },\n    children: geenrateItems(stage).map(_ref2 => {\n      let {\n        key,\n        background\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background\n        }\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 3\n  }, this);\n};\n\n_c = GameBoard;\nexport default _c2 = /*#__PURE__*/React.memo(GameBoard);\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8\n});\n_c3 = Board;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GameBoard\");\n$RefreshReg$(_c2, \"%default%\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx"],"names":["React","styled","getCount","base","Math","pow","round","getTolerance","t","sign","random","getRandomItem","len","floor","getColor","generateColors","stage","r","g","b","answer","geenrateItems","count","answerIdx","Array","fill","undefined","map","_","idx","key","background","GameBoard","memo","Board","width","aspectRatio","display","gridTemplate","gap"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;;;AAEA,MAAMC,QAAQ,GAAIC,IAAD,IAAkBC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,CAACH,IAAI,GAAG,GAAR,IAAe,CAA1B,IAA+B,CAAxC,EAA2C,CAA3C,CAAnC;;AAEA,MAAMI,YAAY,GAAIC,CAAD,IAAeJ,IAAI,CAACK,IAAL,CAAUL,IAAI,CAACM,MAAL,KAAgB,GAA1B,IAAiCF,CAArE;;AAEA,MAAMG,aAAa,GAAIC,GAAD,IAAiBR,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACM,MAAL,KAAgBE,GAA3B,CAAvC;;AAEA,MAAME,QAAQ,GAAG,MAAMV,IAAI,CAACS,KAAL,CAAWT,IAAI,CAACM,MAAL,KAAgB,GAA3B,CAAvB;;AAEA,MAAMK,cAAc,GAAIC,KAAD,IAGlB;AACJ,QAAMC,CAAC,GAAGH,QAAQ,EAAlB;AACA,QAAMI,CAAC,GAAGJ,QAAQ,EAAlB;AACA,QAAMK,CAAC,GAAGL,QAAQ,EAAlB;AAEA,SAAO;AACNX,IAAAA,IAAI,EAAG,OAAMc,CAAE,KAAIC,CAAE,KAAIC,CAAE,GADrB;AAENC,IAAAA,MAAM,EAAG,OAAMH,CAAC,GAAGV,YAAY,CAACS,KAAD,CAAQ,KAAIE,CAAC,GAAGX,YAAY,CAACS,KAAD,CAAQ,KAAIG,CAAC,GAAGZ,YAAY,CAACS,KAAD,CAAQ;AAFzF,GAAP;AAIA,CAZD;;AAcA,MAAMK,aAAa,GAAIL,KAAD,IAGf;AACN,QAAM;AAAEb,IAAAA,IAAF;AAAQiB,IAAAA;AAAR,MAAmBL,cAAc,CAACC,KAAD,CAAvC;AAEA,QAAMM,KAAK,GAAGpB,QAAQ,CAACc,KAAD,CAAtB;AAEA,QAAMO,SAAS,GAAGZ,aAAa,CAACW,KAAD,CAA/B;AAEA,SAAOE,KAAK,CAACF,KAAD,CAAL,CACJG,IADI,CACCC,SADD,EAELC,GAFK,CAED,CAACC,CAAD,EAAIC,GAAJ,MAAa;AACjBC,IAAAA,GAAG,EAAG,GAAED,GAAI,EADK;AAEjBE,IAAAA,UAAU,EAAER,SAAS,KAAKM,GAAd,GAAoBT,MAApB,GAA6BjB;AAFxB,GAAb,CAFC,CAAP;AAMA,CAhBD;;AAsBA,MAAM6B,SAAmC,GAAG,QAEtC;AAAA,MAFuC;AAC5ChB,IAAAA;AAD4C,GAEvC;AACL,sBACC,QAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAE,iBAAWd,QAAQ,CAACc,KAAD;AAArB,KAAd;AAAA,cACEK,aAAa,CAACL,KAAD,CAAb,CAAqBW,GAArB,CAAyB;AAAA,UAAC;AAAEG,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD;AAAA,0BACzB;AACE,QAAA,KAAK,EAAE;AAAEA,UAAAA;AAAF;AADT,SAEMD,GAFN;AAAA;AAAA;AAAA;AAAA,cADyB;AAAA,KAAzB;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAUA,CAbD;;KAAME,S;AAeN,kCAAehC,KAAK,CAACiC,IAAN,CAAWD,SAAX,CAAf;AAEA,MAAME,KAAK,GAAGjC,MAAM,CAAC,KAAD,EAAQ;AAC3BkC,EAAAA,KAAK,EAAE,MADoB;AAE3BC,EAAAA,WAAW,EAAE,KAFc;AAG3BC,EAAAA,OAAO,EAAE,MAHkB;AAI3BC,EAAAA,YAAY,EAAE,uDAJa;AAK3BC,EAAAA,GAAG,EAAE;AALsB,CAAR,CAApB;MAAML,K","sourcesContent":["import * as React from 'react';\nimport { styled } from '../stitches.config';\n\nconst getCount = (base: number) => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nconst getTolerance = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = (len: number) => Math.floor(Math.random() * len);\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = (stage: number): {\n\tbase: string;\n\tanswer: string;\n} => {\n\tconst\tr = getColor();\n\tconst g = getColor();\n\tconst b = getColor();\n\n\treturn {\n\t\tbase: `rgb(${r}, ${g}, ${b})`,\n\t\tanswer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n\t}\n};\n\nconst geenrateItems = (stage: number): {\n\tkey: string;\n\tbackground: string;\n}[] => {\n\tconst { base, answer } = generateColors(stage);\n\n\tconst count = getCount(stage);\n\n\tconst answerIdx = getRandomItem(count);\n\n\treturn Array(count)\n\t  .fill(undefined)\n\t\t.map((_, idx) => ({\n\t\t\tkey: `${idx}`,\n\t\t\tbackground: answerIdx === idx ? answer : base,\n\t  }));\n};\n\ninterface GameBoardProps {\n\tstage: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n\tstage,\n}) => {\n\treturn (\n\t\t<Board style={{ '--count': getCount(stage) } as React.CSSProperties}>\n\t\t\t{geenrateItems(stage).map(({ key, background }) => (\n\t\t\t\t<div\n\t\t\t\t  style={{ background }}\n\t\t\t\t\tkey={key}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</Board>\n\t);\n};\n\nexport default React.memo(GameBoard);\n\nconst Board = styled('div', {\n\twidth: '100%',\n\taspectRatio: '1/1',\n\tdisplay: 'grid',\n\tgridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n\tgap: 8,\n});\n"]},"metadata":{},"sourceType":"module"}