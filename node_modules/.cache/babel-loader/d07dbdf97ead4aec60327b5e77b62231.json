{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Status.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { GameHeader, GameStatusInfo } from '../../components';\nimport useRequestAnimationFrame from './useRequestAnimationFrame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Status = _ref => {\n  _s();\n\n  let {\n    isStarted,\n    stage,\n    score,\n    onGameEnd\n  } = _ref;\n  const [remainingTime, setRemainingTime] = React.useState(15000);\n\n  const tick = () => setRemainingTime(prev => prev - 100);\n\n  const elapsedTime = React.useRef(0);\n  useRequestAnimationFrame(deltaTime => {\n    if (!isStarted) return;\n    elapsedTime.current += deltaTime;\n\n    if (elapsedTime.current >= 100) {\n      elapsedTime.current = 0;\n      tick();\n    }\n  }, [isStarted]);\n  React.useEffect(() => {\n    if (remainingTime >= 0) return;\n    onGameEnd();\n  }, [remainingTime, onGameEnd]);\n  return /*#__PURE__*/_jsxDEV(GameHeader, {\n    children: /*#__PURE__*/_jsxDEV(GameStatusInfo, {\n      stage: stage,\n      score: score,\n      time: Math.max(remainingTime, 0)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Status, \"56GRNwBwc1GLDNR6WiIOWq34KWM=\", false, function () {\n  return [useRequestAnimationFrame];\n});\n\n_c = Status;\nexport default Status;\n\nvar _c;\n\n$RefreshReg$(_c, \"Status\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Status.tsx"],"names":["React","GameHeader","GameStatusInfo","useRequestAnimationFrame","Status","isStarted","stage","score","onGameEnd","remainingTime","setRemainingTime","useState","tick","prev","elapsedTime","useRef","deltaTime","current","useEffect","Math","max"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AACA,OAAOC,wBAAP,MAAqC,4BAArC;;;AASA,MAAMC,MAA6B,GAAG,QAKhC;AAAA;;AAAA,MALiC;AACrCC,IAAAA,SADqC;AAErCC,IAAAA,KAFqC;AAGrCC,IAAAA,KAHqC;AAIrCC,IAAAA;AAJqC,GAKjC;AACJ,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,KAAK,CAACW,QAAN,CAAuB,KAAvB,CAA1C;;AACA,QAAMC,IAAI,GAAG,MAAMF,gBAAgB,CAAEG,IAAD,IAAUA,IAAI,GAAG,GAAlB,CAAnC;;AAEA,QAAMC,WAAW,GAAGd,KAAK,CAACe,MAAN,CAAqB,CAArB,CAApB;AAEAZ,EAAAA,wBAAwB,CAAEa,SAAD,IAAe;AACtC,QAAI,CAACX,SAAL,EAAgB;AAEhBS,IAAAA,WAAW,CAACG,OAAZ,IAAuBD,SAAvB;;AAEA,QAAIF,WAAW,CAACG,OAAZ,IAAuB,GAA3B,EAAgC;AAC9BH,MAAAA,WAAW,CAACG,OAAZ,GAAsB,CAAtB;AACAL,MAAAA,IAAI;AACL;AACF,GATuB,EASrB,CAACP,SAAD,CATqB,CAAxB;AAWAL,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,QAAIT,aAAa,IAAI,CAArB,EAAwB;AAExBD,IAAAA,SAAS;AACV,GAJD,EAIG,CAACC,aAAD,EAAgBD,SAAhB,CAJH;AAMA,sBACE,QAAC,UAAD;AAAA,2BACE,QAAC,cAAD;AACE,MAAA,KAAK,EAAEF,KADT;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,IAAI,EAAEY,IAAI,CAACC,GAAL,CAASX,aAAT,EAAwB,CAAxB;AAHR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CArCD;;GAAML,M;UAWJD,wB;;;KAXIC,M;AAuCN,eAAeA,MAAf","sourcesContent":["import * as React from 'react';\nimport { GameHeader, GameStatusInfo } from '../../components';\nimport useRequestAnimationFrame from './useRequestAnimationFrame';\n\ninterface StatusProps {\n  isStarted: boolean;\n  stage: number;\n  score: number;\n  onGameEnd: () => void;\n}\n\nconst Status: React.FC<StatusProps> = ({\n  isStarted,\n  stage,\n  score,\n  onGameEnd,\n}) => {\n  const [remainingTime, setRemainingTime] = React.useState<number>(15000);\n  const tick = () => setRemainingTime((prev) => prev - 100);\n\n  const elapsedTime = React.useRef<number>(0);\n\n  useRequestAnimationFrame((deltaTime) => {\n    if (!isStarted) return;\n\n    elapsedTime.current += deltaTime;\n\n    if (elapsedTime.current >= 100) {\n      elapsedTime.current = 0;\n      tick();\n    }\n  }, [isStarted]);\n\n  React.useEffect(() => {\n    if (remainingTime >= 0) return;\n\n    onGameEnd();\n  }, [remainingTime, onGameEnd]);\n\n  return (\n    <GameHeader>\n      <GameStatusInfo\n        stage={stage}\n        score={score}\n        time={Math.max(remainingTime, 0)}\n      />\n    </GameHeader>\n  );\n};\n\nexport default Status;\n"]},"metadata":{},"sourceType":"module"}