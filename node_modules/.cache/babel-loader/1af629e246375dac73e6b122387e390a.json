{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx\";\nimport * as React from 'react';\nimport { styled } from '../stitches.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCount = base => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nconst getTolerance = t => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = len => Math.floor(Math.random() * (len - 1));\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = stage => {\n  const r = getColor();\n  const g = getColor();\n  const b = getColor();\n  return {\n    base: `rgb(${r}, ${g}, ${b})`,\n    answer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n  };\n};\n\nconst geenrateItems = stage => {\n  const {\n    base,\n    answer\n  } = generateColors(stage);\n  const count = getCount(stage);\n  const answerIdx = getRandomItem(count);\n  console.log(answerIdx, count);\n  return Array(count).fill(undefined).map((_, idx) => ({\n    key: `${idx}`,\n    background: answerIdx === idx ? answer : base\n  }));\n};\n\nconst GameBoard = _ref => {\n  let {\n    stage\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Board, {\n    style: {\n      '--count': Math.floor(Math.sqrt(getCount(stage)))\n    },\n    children: geenrateItems(stage).map(_ref2 => {\n      let {\n        key,\n        background\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background\n        }\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c = GameBoard;\nexport default _c2 = /*#__PURE__*/React.memo(GameBoard);\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8\n});\n_c3 = Board;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GameBoard\");\n$RefreshReg$(_c2, \"%default%\");\n$RefreshReg$(_c3, \"Board\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx"],"names":["React","styled","getCount","base","Math","pow","round","getTolerance","t","sign","random","getRandomItem","len","floor","getColor","generateColors","stage","r","g","b","answer","geenrateItems","count","answerIdx","console","log","Array","fill","undefined","map","_","idx","key","background","GameBoard","sqrt","memo","Board","width","aspectRatio","display","gridTemplate","gap"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { styled } from '../stitches.config';\n\nconst getCount = (base: number) => Math.pow(Math.round((base + 0.5) / 2) + 1, 2);\n\nconst getTolerance = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\nconst getRandomItem = (len: number) => Math.floor(Math.random() * (len - 1));\n\nconst getColor = () => Math.floor(Math.random() * 255);\n\nconst generateColors = (stage: number): {\n  base: string;\n  answer: string;\n} => {\n  const  r = getColor();\n  const g = getColor();\n  const b = getColor();\n\n  return {\n    base: `rgb(${r}, ${g}, ${b})`,\n    answer: `rgb(${r + getTolerance(stage)}, ${g + getTolerance(stage)}, ${b + getTolerance(stage)})`\n  }\n};\n\nconst geenrateItems = (stage: number): {\n  key: string;\n  background: string;\n}[] => {\n  const { base, answer } = generateColors(stage);\n\n  const count = getCount(stage);\n\n  const answerIdx = getRandomItem(count);\n\n  console.log(answerIdx, count);\n\n  return Array(count)\n    .fill(undefined)\n    .map((_, idx) => ({\n      key: `${idx}`,\n      background: answerIdx === idx ? answer : base,\n    }));\n};\n\ninterface GameBoardProps {\n  stage: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n  stage,\n}) => {\n  return (\n    <Board style={{ '--count': Math.floor(Math.sqrt(getCount(stage))) } as React.CSSProperties}>\n      {geenrateItems(stage).map(({ key, background }) => (\n        <div\n          style={{ background }}\n          key={key}\n        />\n      ))}\n    </Board>\n  );\n};\n\nexport default React.memo(GameBoard);\n\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8,\n});\n"]},"metadata":{},"sourceType":"module"}