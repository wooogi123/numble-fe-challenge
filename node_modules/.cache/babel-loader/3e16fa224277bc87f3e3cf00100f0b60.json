{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { produce } from './utils';\nimport { INITIAL_TIME, LAST_STAGE, DEDUCT_TIME, INITIAL_STATE } from './constants';\n\nconst gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'init':\n      {\n        return {\n          remainingTime: INITIAL_TIME,\n          stage: 1,\n          score: 0,\n          isStarted: true,\n          isGameOver: false,\n          isClear: false\n        };\n      }\n\n    case 'done':\n      {\n        return INITIAL_STATE;\n      }\n\n    case 'tick':\n      {\n        if (!state.isStarted) return state;\n\n        if (state.remainingTime < action.payload) {\n          return produce(state, {\n            remainingTime: 0,\n            isGameOver: true,\n            isClear: false\n          });\n        }\n\n        const remainingTime = Math.max(Math.floor(state.remainingTime - action.payload), 0);\n        return produce(state, {\n          remainingTime\n        });\n      }\n\n    case 'nextStage':\n      {\n        if (!state.isStarted) return state;\n        if (state.isGameOver) return state;\n        if (state.stage >= LAST_STAGE) return produce(state, {\n          isClear: true\n        });\n        return produce(state, {\n          remainingTime: INITIAL_TIME,\n          stage: state.stage + 1,\n          score: Math.pow(state.stage, 3) * state.remainingTime\n        });\n      }\n\n    case 'deduct':\n      {\n        if (!state.isStarted) return state;\n        if (state.isGameOver) return state;\n\n        if (state.remainingTime < DEDUCT_TIME) {\n          return produce(state, {\n            remainingTime: 0,\n            isGameOver: true\n          });\n        }\n\n        return produce(state, {\n          remainingTime: state.remainingTime - DEDUCT_TIME\n        });\n      }\n\n    default:\n      {\n        throw new Error('invalid action');\n      }\n  }\n};\n\nconst useGameReducer = () => {\n  _s();\n\n  const [state, _dispatch] = React.useReducer(gameReducer, INITIAL_STATE);\n  const dispatch = React.useCallback(action => _dispatch(action), [_dispatch]);\n  return [state, dispatch];\n};\n\n_s(useGameReducer, \"A35NPWiY40PVndbb7Ou4Axy4Go8=\");\n\nexport default useGameReducer;","map":{"version":3,"sources":["/mnt/c/Users/Akalee/Desktop/work/playground/numble-fe-challenge/src/features/game/useGameReducer.ts"],"names":["React","produce","INITIAL_TIME","LAST_STAGE","DEDUCT_TIME","INITIAL_STATE","gameReducer","state","action","type","remainingTime","stage","score","isStarted","isGameOver","isClear","payload","Math","max","floor","pow","Error","useGameReducer","_dispatch","useReducer","dispatch","useCallback"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport { produce } from './utils';\r\nimport {\r\n\tINITIAL_TIME,\r\n\tLAST_STAGE,\r\n\tDEDUCT_TIME,\r\n\tINITIAL_STATE,\r\n} from './constants';\r\nimport type { State, Action } from './types';\r\n\r\nconst gameReducer: React.Reducer<State, Action> = (state, action) => {\r\n\tswitch (action.type) {\r\n    case 'init': {\r\n      return {\r\n        remainingTime: INITIAL_TIME,\r\n        stage: 1,\r\n        score: 0,\r\n        isStarted: true,\r\n        isGameOver: false,\r\n        isClear: false,\r\n      };\r\n    }\r\n    case 'done': {\r\n\t\t\treturn INITIAL_STATE;\r\n    }\r\n    case 'tick': {\r\n      if (!state.isStarted) return state;\r\n\r\n      if (state.remainingTime < action.payload) {\r\n        return produce(state, {\r\n          remainingTime: 0,\r\n          isGameOver: true,\r\n          isClear: false,\r\n        });\r\n      }\r\n\r\n      const remainingTime = Math.max(Math.floor(state.remainingTime - action.payload), 0);\r\n      return produce(state, { remainingTime });\r\n    }\r\n    case 'nextStage': {\r\n      if (!state.isStarted) return state;\r\n      if (state.isGameOver) return state;\r\n      if (state.stage >= LAST_STAGE) return produce(state, { isClear: true });\r\n\r\n      return produce(state, {\r\n        remainingTime: INITIAL_TIME,\r\n        stage: state.stage + 1,\r\n        score: Math.pow(state.stage, 3) * state.remainingTime,\r\n      });\r\n    }\r\n    case 'deduct': {\r\n      if (!state.isStarted) return state;\r\n      if (state.isGameOver) return state;\r\n\r\n      if (state.remainingTime < DEDUCT_TIME) {\r\n        return produce(state, { remainingTime: 0, isGameOver: true });\r\n      }\r\n\r\n      return produce(state, {\r\n        remainingTime: state.remainingTime - DEDUCT_TIME,\r\n      });\r\n    }\r\n    default: {\r\n      throw new Error('invalid action');\r\n    }\r\n\t}\r\n};\r\n\r\ntype UseGameReturn = [\r\n\tstate: State,\r\n\tdispatch: (action: Action) => void,\r\n];\r\n\r\nconst useGameReducer = (): UseGameReturn => {\r\n\tconst [state, _dispatch] = React.useReducer(gameReducer, INITIAL_STATE);\r\n\r\n\tconst dispatch = React.useCallback(\r\n\t\t(action: Action) => _dispatch(action),\r\n\t\t[_dispatch]\r\n\t);\r\n\r\n\treturn [state, dispatch];\r\n};\r\n\r\nexport default useGameReducer;\r\n"]},"metadata":{},"sourceType":"module"}