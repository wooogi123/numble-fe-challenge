{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { styled } from '../../stitches.config';\nimport { GamePlate, GameHeader } from '../../components';\nimport useGame from './useGame';\nimport useRequestAnimationFrame from './useRequestAnimationFrame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [state, dispatch] = useGame();\n  const isStarted = React.useMemo(() => state.isStarted, [state]);\n  const isGameOver = React.useMemo(() => state.isGameOver, [state]);\n  const handleClickStart = React.useCallback(() => {\n    dispatch({\n      type: 'init'\n    });\n  }, [dispatch]);\n  const elapsedTime = React.useRef(null);\n  useRequestAnimationFrame(deltaTime => {\n    if (!state.isStarted) return;\n    if (elapsedTime.current === null) elapsedTime.current = deltaTime;\n\n    if (deltaTime >= elapsedTime.current + 100) {\n      elapsedTime.current = deltaTime;\n      dispatch({\n        type: 'tick'\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(GamePlate, {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      isStarted: isStarted,\n      isGameOver: isGameOver,\n      stage: state.stage,\n      time: state.remainingTime,\n      score: state.score,\n      onClickStart: handleClickStart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Game, \"AVj76HZT7eXMIrkVXO0+Kfy+E38=\", false, function () {\n  return [useGame, useRequestAnimationFrame];\n});\n\n_c = Game;\nexport default Game;\nconst Content = styled('div', {\n  width: 286,\n  height: 320\n});\n_c2 = Content;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Content\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx"],"names":["React","styled","GamePlate","GameHeader","useGame","useRequestAnimationFrame","Game","state","dispatch","isStarted","useMemo","isGameOver","handleClickStart","useCallback","type","elapsedTime","useRef","deltaTime","current","stage","remainingTime","score","Content","width","height"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SACCC,SADD,EAECC,UAFD,QAGO,kBAHP;AAIA,OAAOC,OAAP,MAAqB,WAArB;AAEA,OAAOC,wBAAP,MAAqC,4BAArC;;;AAEA,MAAMC,IAAc,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,OAAO,EAAjC;AAEA,QAAMK,SAAS,GAAGT,KAAK,CAACU,OAAN,CAAc,MAAMH,KAAK,CAACE,SAA1B,EAAqC,CAACF,KAAD,CAArC,CAAlB;AACA,QAAMI,UAAU,GAAGX,KAAK,CAACU,OAAN,CAAc,MAAMH,KAAK,CAACI,UAA1B,EAAsC,CAACJ,KAAD,CAAtC,CAAnB;AAEA,QAAMK,gBAAgB,GAAGZ,KAAK,CAACa,WAAN,CAAkB,MAAM;AAChDL,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACA,GAFwB,EAEtB,CAACN,QAAD,CAFsB,CAAzB;AAIA,QAAMO,WAAW,GAAGf,KAAK,CAACgB,MAAN,CAA4B,IAA5B,CAApB;AAEAX,EAAAA,wBAAwB,CAAEY,SAAD,IAAe;AACvC,QAAI,CAACV,KAAK,CAACE,SAAX,EAAsB;AAEtB,QAAIM,WAAW,CAACG,OAAZ,KAAwB,IAA5B,EAAkCH,WAAW,CAACG,OAAZ,GAAsBD,SAAtB;;AAElC,QAAIA,SAAS,IAAIF,WAAW,CAACG,OAAZ,GAAsB,GAAvC,EAA4C;AAC3CH,MAAAA,WAAW,CAACG,OAAZ,GAAsBD,SAAtB;AACAT,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACA;AACD,GATuB,CAAxB;AAWA,sBACC,QAAC,SAAD;AAAA,4BACC,QAAC,UAAD;AACE,MAAA,SAAS,EAAEL,SADb;AAEC,MAAA,UAAU,EAAEE,UAFb;AAGC,MAAA,KAAK,EAAEJ,KAAK,CAACY,KAHd;AAIC,MAAA,IAAI,EAAEZ,KAAK,CAACa,aAJb;AAKC,MAAA,KAAK,EAAEb,KAAK,CAACc,KALd;AAMC,MAAA,YAAY,EAAET;AANf;AAAA;AAAA;AAAA;AAAA,YADD,eASC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YATD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAaA,CApCD;;GAAMN,I;UACqBF,O,EAW1BC,wB;;;KAZKC,I;AAsCN,eAAeA,IAAf;AAEA,MAAMgB,OAAO,GAAGrB,MAAM,CAAC,KAAD,EAAQ;AAC7BsB,EAAAA,KAAK,EAAE,GADsB;AAE7BC,EAAAA,MAAM,EAAE;AAFqB,CAAR,CAAtB;MAAMF,O","sourcesContent":["import * as React from 'react';\nimport { styled } from '../../stitches.config';\nimport {\n\tGamePlate,\n\tGameHeader,\n} from '../../components';\nimport useGame  from './useGame';\nimport useConditionalEffect from './useConditionalEffect';\nimport useRequestAnimationFrame from './useRequestAnimationFrame';\n\nconst Game: React.FC = () => {\n\tconst [state, dispatch] = useGame();\n\n\tconst isStarted = React.useMemo(() => state.isStarted, [state]);\n\tconst isGameOver = React.useMemo(() => state.isGameOver, [state]);\n\n\tconst handleClickStart = React.useCallback(() => {\n\t\tdispatch({ type: 'init' });\n\t}, [dispatch]);\n\n\tconst elapsedTime = React.useRef<number | null>(null);\n\n\tuseRequestAnimationFrame((deltaTime) => {\n\t\tif (!state.isStarted) return;\n\n\t\tif (elapsedTime.current === null) elapsedTime.current = deltaTime;\n\n\t\tif (deltaTime >= elapsedTime.current + 100) {\n\t\t\telapsedTime.current = deltaTime;\n\t\t\tdispatch({ type: 'tick' });\n\t\t}\n\t});\n\n\treturn (\n\t\t<GamePlate>\n\t\t\t<GameHeader\n  \t\t\tisStarted={isStarted}\n\t\t\t\tisGameOver={isGameOver}\n\t\t\t\tstage={state.stage}\n\t\t\t\ttime={state.remainingTime}\n\t\t\t\tscore={state.score}\n\t\t\t\tonClickStart={handleClickStart}\n\t\t\t/>\n\t\t\t<Content />\n\t\t</GamePlate>\n\t);\n};\n\nexport default Game;\n\nconst Content = styled('div', {\n\twidth: 286,\n\theight: 320,\n});\n"]},"metadata":{},"sourceType":"module"}