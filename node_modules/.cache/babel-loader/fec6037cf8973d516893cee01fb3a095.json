{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { styled } from '../../stitches.config';\nimport { GamePlate, GameHeader } from '../../components';\nimport useGame from './useGame';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [state, dispatch] = useGame();\n  const isStarted = React.useMemo(() => state.isStarted, [state]);\n  const isGameOver = React.useMemo(() => state.isGameOver, [state]);\n  const handleClickStart = React.useCallback(() => {\n    dispatch({\n      type: 'init'\n    });\n  }, [dispatch]);\n  React.useEffect(() => {\n    let then;\n    let elapsed;\n\n    const animate = t => {\n      window.requestAnimationFrame(animate);\n      if (elapsed === undefined) elapsed = t;\n\n      if (t >= elapsed + 100) {\n        elapsed = t;\n        console.log(elapsed);\n        dispatch({\n          type: 'tick'\n        });\n      }\n    };\n\n    window.requestAnimationFrame(animate);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GamePlate, {\n    children: [/*#__PURE__*/_jsxDEV(GameHeader, {\n      isStarted: isStarted,\n      isGameOver: isGameOver,\n      stage: state.stage,\n      time: state.remainingTime,\n      score: state.score,\n      onClickStart: handleClickStart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Game, \"nnhRD6SHnhDpQXpO93mMy11zInU=\", false, function () {\n  return [useGame];\n});\n\n_c = Game;\nexport default Game;\nconst Content = styled('div', {\n  width: 286,\n  height: 320\n});\n_c2 = Content;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Content\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/Game.tsx"],"names":["React","styled","GamePlate","GameHeader","useGame","Game","state","dispatch","isStarted","useMemo","isGameOver","handleClickStart","useCallback","type","useEffect","then","elapsed","animate","t","window","requestAnimationFrame","undefined","console","log","stage","remainingTime","score","Content","width","height"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SACCC,SADD,EAECC,UAFD,QAGO,kBAHP;AAIA,OAAOC,OAAP,MAAqB,WAArB;;;AAEA,MAAMC,IAAc,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,OAAO,EAAjC;AAEA,QAAMI,SAAS,GAAGR,KAAK,CAACS,OAAN,CAAc,MAAMH,KAAK,CAACE,SAA1B,EAAqC,CAACF,KAAD,CAArC,CAAlB;AACA,QAAMI,UAAU,GAAGV,KAAK,CAACS,OAAN,CAAc,MAAMH,KAAK,CAACI,UAA1B,EAAsC,CAACJ,KAAD,CAAtC,CAAnB;AAEA,QAAMK,gBAAgB,GAAGX,KAAK,CAACY,WAAN,CAAkB,MAAM;AAChDL,IAAAA,QAAQ,CAAC;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACA,GAFwB,EAEtB,CAACN,QAAD,CAFsB,CAAzB;AAIAP,EAAAA,KAAK,CAACc,SAAN,CAAgB,MAAM;AACrB,QAAIC,IAAJ;AACA,QAAIC,OAAJ;;AAEA,UAAMC,OAAO,GAAIC,CAAD,IAAe;AAC9BC,MAAAA,MAAM,CAACC,qBAAP,CAA6BH,OAA7B;AAEA,UAAID,OAAO,KAAKK,SAAhB,EAA2BL,OAAO,GAAGE,CAAV;;AAE3B,UAAIA,CAAC,IAAIF,OAAO,GAAG,GAAnB,EAAwB;AACvBA,QAAAA,OAAO,GAAGE,CAAV;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACAT,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAR;AACA;AACD,KAVD;;AAYAM,IAAAA,MAAM,CAACC,qBAAP,CAA6BH,OAA7B;AACA,GAjBD,EAiBG,EAjBH;AAmBA,sBACC,QAAC,SAAD;AAAA,4BACC,QAAC,UAAD;AACE,MAAA,SAAS,EAAET,SADb;AAEC,MAAA,UAAU,EAAEE,UAFb;AAGC,MAAA,KAAK,EAAEJ,KAAK,CAACkB,KAHd;AAIC,MAAA,IAAI,EAAElB,KAAK,CAACmB,aAJb;AAKC,MAAA,KAAK,EAAEnB,KAAK,CAACoB,KALd;AAMC,MAAA,YAAY,EAAEf;AANf;AAAA;AAAA;AAAA;AAAA,YADD,eASC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YATD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAaA,CA1CD;;GAAMN,I;UACqBD,O;;;KADrBC,I;AA4CN,eAAeA,IAAf;AAEA,MAAMsB,OAAO,GAAG1B,MAAM,CAAC,KAAD,EAAQ;AAC7B2B,EAAAA,KAAK,EAAE,GADsB;AAE7BC,EAAAA,MAAM,EAAE;AAFqB,CAAR,CAAtB;MAAMF,O","sourcesContent":["import * as React from 'react';\nimport { styled } from '../../stitches.config';\nimport {\n\tGamePlate,\n\tGameHeader,\n} from '../../components';\nimport useGame  from './useGame';\n\nconst Game: React.FC = () => {\n\tconst [state, dispatch] = useGame();\n\n\tconst isStarted = React.useMemo(() => state.isStarted, [state]);\n\tconst isGameOver = React.useMemo(() => state.isGameOver, [state]);\n\n\tconst handleClickStart = React.useCallback(() => {\n\t\tdispatch({ type: 'init' });\n\t}, [dispatch]);\n\n\tReact.useEffect(() => {\n\t\tlet then: number | undefined;\n\t\tlet elapsed: number | undefined;\n\n\t\tconst animate = (t: number) => {\n\t\t\twindow.requestAnimationFrame(animate);\n\n\t\t\tif (elapsed === undefined) elapsed = t;\n\n\t\t\tif (t >= elapsed + 100) {\n\t\t\t\telapsed = t;\n\t\t\t\tconsole.log(elapsed);\n\t\t\t\tdispatch({ type: 'tick' });\n\t\t\t}\n\t\t};\n\n\t\twindow.requestAnimationFrame(animate);\n\t}, []);\n\n\treturn (\n\t\t<GamePlate>\n\t\t\t<GameHeader\n  \t\t\tisStarted={isStarted}\n\t\t\t\tisGameOver={isGameOver}\n\t\t\t\tstage={state.stage}\n\t\t\t\ttime={state.remainingTime}\n\t\t\t\tscore={state.score}\n\t\t\t\tonClickStart={handleClickStart}\n\t\t\t/>\n\t\t\t<Content />\n\t\t</GamePlate>\n\t);\n};\n\nexport default Game;\n\nconst Content = styled('div', {\n\twidth: 286,\n\theight: 320,\n});\n"]},"metadata":{},"sourceType":"module"}