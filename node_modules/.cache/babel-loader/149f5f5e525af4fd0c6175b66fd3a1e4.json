{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from 'react';\nconst initialState = {\n  remainingTime: 0,\n  stage: 0,\n  score: 0,\n  isStarted: false,\n  isGameOver: false\n};\n\nconst useGame = () => {\n  _s();\n\n  const [state, dispatch] = React.useReducer(gameReducer, initialState);\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      console.log(state);\n    }\n  }, [state]);\n  return [state, dispatch];\n};\n\n_s(useGame, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\nexport default useGame;\nexport const gameReducer = (state, action) => {\n  switch (action.type) {\n    case 'init':\n      {\n        return {\n          remainingTime: 15000,\n          stage: 1,\n          score: 0,\n          isStarted: true,\n          isGameOver: false\n        };\n      }\n\n    case 'done':\n      {\n        return initialState;\n      }\n\n    case 'tick':\n      {\n        if (state.isStarted) {\n          if (state.remainingTime <= 0) {\n            return produce(state, {\n              isStarted: false,\n              isGameOver: true\n            });\n          }\n\n          return produce(state, {\n            remainingTime: state.remainingTime - 100\n          });\n        }\n\n        return state;\n      }\n\n    default:\n      {\n        throw new Error('invalid action');\n      }\n  }\n\n  ;\n};\n\nconst produce = (state, newState) => ({ ...state,\n  ...newState\n});","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/features/game/useGame.ts"],"names":["React","initialState","remainingTime","stage","score","isStarted","isGameOver","useGame","state","dispatch","useReducer","gameReducer","useEffect","process","env","NODE_ENV","console","log","action","type","produce","Error","newState"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,YAAmB,GAAG;AAC3BC,EAAAA,aAAa,EAAE,CADY;AAE3BC,EAAAA,KAAK,EAAE,CAFoB;AAG3BC,EAAAA,KAAK,EAAE,CAHoB;AAI3BC,EAAAA,SAAS,EAAE,KAJgB;AAK3BC,EAAAA,UAAU,EAAE;AALe,CAA5B;;AAaA,MAAMC,OAAO,GAAG,MAAqB;AAAA;;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACU,UAAN,CAAiBC,WAAjB,EAA8BV,YAA9B,CAA1B;AAEDD,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACrB,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACA;AACD,GAJD,EAIG,CAACA,KAAD,CAJH;AAMA,SAAO,CAACA,KAAD,EAAQC,QAAR,CAAP;AACA,CAVD;;GAAMF,O;;AAYN,eAAeA,OAAf;AAEA,OAAO,MAAMI,WAAyC,GAAG,CAACH,KAAD,EAAQU,MAAR,KAAmB;AAC3E,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,MAAL;AAAa;AACZ,eAAO;AACNjB,UAAAA,aAAa,EAAE,KADT;AAENC,UAAAA,KAAK,EAAE,CAFD;AAGNC,UAAAA,KAAK,EAAE,CAHD;AAINC,UAAAA,SAAS,EAAE,IAJL;AAKNC,UAAAA,UAAU,EAAE;AALN,SAAP;AAOA;;AACD,SAAK,MAAL;AAAa;AACZ,eAAOL,YAAP;AACA;;AACD,SAAK,MAAL;AAAa;AACZ,YAAIO,KAAK,CAACH,SAAV,EAAqB;AACpB,cAAIG,KAAK,CAACN,aAAN,IAAuB,CAA3B,EAA8B;AAC7B,mBAAOkB,OAAO,CAACZ,KAAD,EAAQ;AAAEH,cAAAA,SAAS,EAAE,KAAb;AAAoBC,cAAAA,UAAU,EAAE;AAAhC,aAAR,CAAd;AACA;;AAED,iBAAOc,OAAO,CAACZ,KAAD,EAAQ;AAAEN,YAAAA,aAAa,EAAEM,KAAK,CAACN,aAAN,GAAsB;AAAvC,WAAR,CAAd;AACA;;AAED,eAAOM,KAAP;AACA;;AACD;AAAS;AACR,cAAM,IAAIa,KAAJ,CAAU,gBAAV,CAAN;AACA;AA1BF;;AA2BC;AACD,CA7BM;;AA6CP,MAAMD,OAAO,GAAG,CAAIZ,KAAJ,EAAcc,QAAd,MACb,EAAE,GAAGd,KAAL;AAAY,KAAGc;AAAf,CADa,CAAhB","sourcesContent":["import * as React from 'react';\n\nconst initialState: State = {\n\tremainingTime: 0,\n\tstage: 0,\n\tscore: 0,\n\tisStarted: false,\n\tisGameOver: false,\n};\n\ntype UseGameReturn = [\n\tstate: State,\n\tdispatch: React.Dispatch<Action>,\n];\n\nconst useGame = (): UseGameReturn => {\n  const [state, dispatch] = React.useReducer(gameReducer, initialState);\n\n\tReact.useEffect(() => {\n\t\tif (process.env.NODE_ENV === 'development') {\n\t\t\tconsole.log(state);\n\t\t}\n\t}, [state]);\n\n\treturn [state, dispatch];\n}\n\nexport default useGame;\n\nexport const gameReducer: React.Reducer<State, Action> = (state, action) => {\n\tswitch (action.type) {\n\t\tcase 'init': {\n\t\t\treturn {\n\t\t\t\tremainingTime: 15000,\n\t\t\t\tstage: 1,\n\t\t\t\tscore: 0,\n\t\t\t\tisStarted: true,\n\t\t\t\tisGameOver: false,\n\t\t\t};\n\t\t}\n\t\tcase 'done': {\n\t\t\treturn initialState;\n\t\t}\n\t\tcase 'tick': {\n\t\t\tif (state.isStarted) {\n\t\t\t\tif (state.remainingTime <= 0) {\n\t\t\t\t\treturn produce(state, { isStarted: false, isGameOver: true });\n\t\t\t\t}\n\n\t\t\t\treturn produce(state, { remainingTime: state.remainingTime - 100 });\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Error('invalid action');\n\t\t}\n\t};\n};\n\ninterface State {\n\tremainingTime: number;\n\tstage: number;\n\tscore: number;\n\tisStarted: boolean;\n\tisGameOver: boolean;\n}\n\ntype Action =\n  | { type: 'init' }\n\t| { type: 'done' }\n\t| { type: 'tick' }\n;\n\nconst produce = <S>(state: S, newState: Partial<S>): S =>\n  ({ ...state, ...newState });\n"]},"metadata":{},"sourceType":"module"}