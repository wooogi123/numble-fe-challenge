{"ast":null,"code":"var _jsxFileName = \"/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx\";\nimport * as React from 'react';\nimport { styled } from '../stitches.config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameBoard = _ref => {\n  let {\n    stage\n  } = _ref;\n  const count = Math.pow(Math.round((stage + 0.5) / 2) + 1, 2);\n\n  const generateColors = () => {\n    const getColor = () => Math.floor(230 * Math.random());\n\n    const r = getColor();\n    const g = getColor();\n    const b = getColor();\n\n    const getDeviation = t => Math.sign(Math.random() - 0.5) * t;\n\n    return {\n      baseColor: `rgb(${r}, ${g}, ${b})`,\n      answerColor: `rgb(${r + getDeviation(stage)}, ${g + getDeviation(stage)}, ${b + getDeviation(stage)})`\n    };\n  };\n\n  const getRandomItem = len => Math.floor(Math.random() * len);\n\n  const getItems = () => {\n    const {\n      baseColor,\n      answerColor\n    } = generateColors();\n    const arr = Array(count).fill(undefined).map((_, idx) => idx);\n    const itemIdx = getRandomItem(arr.length);\n    return arr.map((el, idx) => ({\n      key: el.toString(),\n      background: itemIdx === idx ? answerColor : baseColor\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Board, {\n    style: {\n      '--count': 2\n    },\n    children: getItems().map(_ref2 => {\n      let {\n        key,\n        background\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background\n        }\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n};\n\n_c = GameBoard;\nexport default GameBoard;\nconst Board = styled('div', {\n  width: '100%',\n  aspectRatio: '1/1',\n  display: 'grid',\n  gridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n  gap: 8\n});\n_c2 = Board;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GameBoard\");\n$RefreshReg$(_c2, \"Board\");","map":{"version":3,"sources":["/Users/leejaeuk/Dev/playground/numble-1/src/components/GameBoard.tsx"],"names":["React","styled","GameBoard","stage","count","Math","pow","round","generateColors","getColor","floor","random","r","g","b","getDeviation","t","sign","baseColor","answerColor","getRandomItem","len","getItems","arr","Array","fill","undefined","map","_","idx","itemIdx","length","el","key","toString","background","Board","width","aspectRatio","display","gridTemplate","gap"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;;;AAMA,MAAMC,SAAmC,GAAG,QAEtC;AAAA,MAFuC;AAC5CC,IAAAA;AAD4C,GAEvC;AACL,QAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAW,CAACJ,KAAK,GAAG,GAAT,IAAgB,CAA3B,IAAgC,CAAzC,EAA4C,CAA5C,CAAd;;AAEA,QAAMK,cAAc,GAAG,MAAmD;AACzE,UAAMC,QAAQ,GAAG,MAAMJ,IAAI,CAACK,KAAL,CAAW,MAAML,IAAI,CAACM,MAAL,EAAjB,CAAvB;;AAEA,UAAMC,CAAC,GAAGH,QAAQ,EAAlB;AACA,UAAMI,CAAC,GAAGJ,QAAQ,EAAlB;AACA,UAAMK,CAAC,GAAGL,QAAQ,EAAlB;;AAEA,UAAMM,YAAY,GAAIC,CAAD,IAAeX,IAAI,CAACY,IAAL,CAAUZ,IAAI,CAACM,MAAL,KAAgB,GAA1B,IAAiCK,CAArE;;AAEA,WAAO;AACNE,MAAAA,SAAS,EAAG,OAAMN,CAAE,KAAIC,CAAE,KAAIC,CAAE,GAD1B;AAENK,MAAAA,WAAW,EAAG,OAAMP,CAAC,GAAGG,YAAY,CAACZ,KAAD,CAAQ,KAAIU,CAAC,GAAGE,YAAY,CAACZ,KAAD,CAAQ,KAAIW,CAAC,GAAGC,YAAY,CAACZ,KAAD,CAAQ;AAF9F,KAAP;AAIA,GAbD;;AAeA,QAAMiB,aAAa,GAAIC,GAAD,IAAiBhB,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBU,GAA3B,CAAvC;;AAEA,QAAMC,QAAQ,GAAG,MAA6C;AAC7D,UAAM;AAAEJ,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAA6BX,cAAc,EAAjD;AAEA,UAAMe,GAAG,GAAGC,KAAK,CAACpB,KAAD,CAAL,CAAaqB,IAAb,CAAkBC,SAAlB,EAA6BC,GAA7B,CAAiC,CAACC,CAAD,EAAIC,GAAJ,KAAaA,GAA9C,CAAZ;AAEA,UAAMC,OAAO,GAAGV,aAAa,CAACG,GAAG,CAACQ,MAAL,CAA7B;AAEA,WAAOR,GAAG,CAACI,GAAJ,CAAQ,CAACK,EAAD,EAAKH,GAAL,MAAc;AAAEI,MAAAA,GAAG,EAAED,EAAE,CAACE,QAAH,EAAP;AAAsBC,MAAAA,UAAU,EAAEL,OAAO,KAAKD,GAAZ,GAAkBV,WAAlB,GAAgCD;AAAlE,KAAd,CAAR,CAAP;AACA,GARD;;AAUA,sBACC,QAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAE,iBAAW;AAAb,KAAd;AAAA,cACEI,QAAQ,GAAGK,GAAX,CAAe;AAAA,UAAC;AAAEM,QAAAA,GAAF;AAAOE,QAAAA;AAAP,OAAD;AAAA,0BACf;AAAe,QAAA,KAAK,EAAE;AAAEA,UAAAA;AAAF;AAAtB,SAAUF,GAAV;AAAA;AAAA;AAAA;AAAA,cADe;AAAA,KAAf;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAOA,CAvCD;;KAAM/B,S;AAyCN,eAAeA,SAAf;AAEA,MAAMkC,KAAK,GAAGnC,MAAM,CAAC,KAAD,EAAQ;AAC3BoC,EAAAA,KAAK,EAAE,MADoB;AAE3BC,EAAAA,WAAW,EAAE,KAFc;AAG3BC,EAAAA,OAAO,EAAE,MAHkB;AAI3BC,EAAAA,YAAY,EAAE,uDAJa;AAK3BC,EAAAA,GAAG,EAAE;AALsB,CAAR,CAApB;MAAML,K","sourcesContent":["import * as React from 'react';\nimport { styled } from '../stitches.config';\n\ninterface GameBoardProps {\n\tstage: number;\n}\n\nconst GameBoard: React.FC<GameBoardProps> = ({\n\tstage,\n}) => {\n\tconst count = Math.pow(Math.round((stage + 0.5) / 2) + 1, 2);\n\n\tconst generateColors = (): { baseColor: string; answerColor: string; } => {\n\t\tconst getColor = () => Math.floor(230 * Math.random());\n\n\t\tconst r = getColor();\n\t\tconst g = getColor();\n\t\tconst b = getColor();\n\n\t\tconst getDeviation = (t: number) => Math.sign(Math.random() - 0.5) * t;\n\n\t\treturn {\n\t\t\tbaseColor: `rgb(${r}, ${g}, ${b})`,\n\t\t\tanswerColor: `rgb(${r + getDeviation(stage)}, ${g + getDeviation(stage)}, ${b + getDeviation(stage)})`,\n\t\t};\n\t};\n\n\tconst getRandomItem = (len: number) => Math.floor(Math.random() * len);\n\n\tconst getItems = (): { key: string; background: string }[] => {\n\t\tconst { baseColor, answerColor } = generateColors();\n\n\t\tconst arr = Array(count).fill(undefined).map((_, idx) => (idx));\n\n\t\tconst itemIdx = getRandomItem(arr.length);\n\n\t\treturn arr.map((el, idx) => ({ key: el.toString(), background: itemIdx === idx ? answerColor : baseColor }));\n\t};\n\n\treturn (\n\t\t<Board style={{ '--count': 2 } as React.CSSProperties}>\n\t\t\t{getItems().map(({ key, background }) => (\n\t\t\t\t<div key={key} style={{ background }}></div>\n\t\t\t))}\n\t\t</Board>\n\t);\n};\n\nexport default GameBoard;\n\nconst Board = styled('div', {\n\twidth: '100%',\n\taspectRatio: '1/1',\n\tdisplay: 'grid',\n\tgridTemplate: 'repeat(var(--count), 1fr) / repeat(var(--count), 1fr)',\n\tgap: 8,\n});\n"]},"metadata":{},"sourceType":"module"}